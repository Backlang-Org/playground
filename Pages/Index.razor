@page "/"
@using Backlang.Codeanalysis.Parsing
@using BlazorMonaco

@inject SampleLoader sampleLoader

<PageTitle>Playground</PageTitle>

<select name="sample" id="sample" @bind="@SelectedSample">
  <option value="hello_world">Hello World</option>
  <option value="units">Units</option>
  <option value="structs">Structs</option>
  <option value="du">Discriminated Unions</option>
</select>

<textarea class="border-2 min-w-[50%] min-h-screen" @bind="@Code" />
<MonacoEditor @ref="_editor" Id="sample-code-editor-123" ConstructionOptions="EditorConstructionOptions" />

@code {
	private MonacoEditor _editor { get; set; }
	private string ValueToSet { get; set; }

	private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
	{
		return new StandaloneEditorConstructionOptions
			{
				Language = "javascript",
				GlyphMargin = true,
				Value = "\"use strict\";\n" +
						"function Person(age) {\n" +
						"	if (age) {\n" +
						"		this.age = age;\n" +
						"	}\n" +
						"}\n" +
						"Person.prototype.getAge = function () {\n" +
						"	return this.age;\n" +
						"};\n"
			};
	}
}


<p role="status">Current Error Count: @ErrorCount</p>
<p role="status">Error: @Error</p>
<p role="status">text: @Code</p>

<button class="btn btn-primary rounded-md m-3" @onclick="@Compile">Compile</button>

@code {
	

	[Parameter]
	public string Filename { get; set; }

	private string CsCode { get; set; } = "";

	private MonacoEditor MonacoEditor { get; set; }


	[Parameter]
	public string Code { get; set; }

	[Parameter]
	public int ErrorCount { get; set; } = 0;

	[Parameter]
	public string Error { get; set; } = "blub";

	private string _selectedSample;

	[Parameter]
	public string SelectedSample
	{
		get { return _selectedSample; }
		set { _selectedSample = value; OnSampleSelect(value); }
	}


	public async Task OnSampleSelect(string selectedSample) {
		Code = await sampleLoader.GetSampleAsync(selectedSample);
	}

	public void Compile()
	{
		var p = Parser.Parse(new SourceDocument("playground.back", Code));

		ErrorCount = p.Messages.Count;

		if (ErrorCount > 0)
		{
			Error = string.Join("\n", p.Messages.Select(_=> _.ToString()));
		}
		else
		{
			Error = "";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		SelectedSample = "hello_world";
		await OnSampleSelect(SelectedSample);
	}
}